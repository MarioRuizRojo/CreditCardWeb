// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`check constructor 1`] = `
Object {
  "component": ValidatorCreditCardEditor {
    "$$": Object {
      "after_update": Array [],
      "before_update": Array [],
      "bound": Object {},
      "callbacks": Object {},
      "context": Map {},
      "ctx": Array [
        MyValidator {
          "errorsToShow": Array [
            "",
            "",
            "",
            "",
          ],
          "passed": Array [
            false,
            false,
            false,
            false,
          ],
          "requiredError": "Required",
          "validations": Array [
            MyValidation {
              "errorMessage": "Should contain only letters",
              "ruleFormat": /\\(\\[a-zA-Z\\]\\+\\)/i,
            },
            MyValidation {
              "errorMessage": "Should contain 16 digits",
              "ruleFormat": /\\(\\[0-9\\]\\{16\\}\\)/i,
            },
            MyValidation {
              "errorMessage": "Should have date format",
              "ruleFormat": /\\^\\(0\\[1-9\\]\\|1\\[0-2\\]\\)\\\\/\\(\\[0-9\\]\\{2\\}\\)\\$/i,
            },
            MyValidation {
              "errorMessage": "Should contain 3 digits",
              "ruleFormat": /\\(\\[0-9\\]\\{3\\}\\)/i,
            },
          ],
        },
        [Function],
      ],
      "dirty": Array [
        -1,
      ],
      "fragment": Object {
        "c": [Function],
        "d": [Function],
        "i": [Function],
        "l": [Function],
        "m": [Function],
        "o": [Function],
        "p": [Function],
      },
      "not_equal": [Function],
      "on_destroy": Array [
        [Function],
        [Function],
      ],
      "on_disconnect": Array [],
      "on_mount": Array [],
      "props": Object {
        "validator": 0,
      },
      "skip_bound": false,
      "update": [Function],
    },
    "$$set": [Function],
    "$capture_state": [Function],
    "$inject_state": [Function],
  },
  "container": <body>
    <div />
  </body>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
