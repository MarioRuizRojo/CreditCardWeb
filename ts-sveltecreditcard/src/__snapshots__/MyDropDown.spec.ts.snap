// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`check constructor 1`] = `
Object {
  "component": MyDropDown {
    "$$": Object {
      "after_update": Array [],
      "before_update": Array [],
      "bound": Object {},
      "callbacks": Object {},
      "context": Map {},
      "ctx": Array [
        Array [
          MyDropDownOption {
            "cssClass": "flag flag-uk",
            "handleClick": [Function],
            "text": "Option 1",
          },
          MyDropDownOption {
            "cssClass": "flag flag-es",
            "handleClick": [MockFunction],
            "text": "Option 2",
          },
        ],
        "main text caption display",
        true,
        "bi bi-caret-left",
        0,
        -0,
        [Function],
        [Function],
        [Function],
      ],
      "dirty": Array [
        -1,
      ],
      "fragment": Object {
        "c": [Function],
        "d": [Function],
        "i": [Function],
        "l": [Function],
        "m": [Function],
        "o": [Function],
        "p": [Function],
      },
      "not_equal": [Function],
      "on_destroy": Array [
        [Function],
      ],
      "on_disconnect": Array [],
      "on_mount": Array [],
      "props": Object {
        "dropDownOptions": 0,
        "mainCaption": 1,
      },
      "skip_bound": false,
      "update": [Function],
    },
    "$$set": [Function],
    "$capture_state": [Function],
    "$inject_state": [Function],
  },
  "container": <body>
    <div>
      <div
        class="col"
      >
        <button
          class="row dropdownred svelte-2puf0x"
          data-testid="mainbuttondropdown"
          id="mainButton"
          type="button"
        >
          main text caption display
           
          <svg
            class="iconCaret bi bi-caret-left svelte-2puf0x"
            fill="currentColor"
            height="16"
            viewBox="0 0 16 16"
            width="16"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M10 12.796V3.204L4.519 8 10 12.796zm-.659.753-5.48-4.796a1 1 0 0 1 0-1.506l5.48-4.796A1 1 0 0 1 11 3.204v9.592a1 1 0 0 1-1.659.753z"
            />
          </svg>
        </button>
         
        <div
          class="row"
          hidden=""
          style="display: inline-block; position: absolute; inset: 0px auto auto 0px; margin: 0px; transform: translate(0px, 0px);"
        >
          <button
            class="row btn dropdownred svelte-2puf0x"
            data-testid="option0"
            type="button"
          >
            <i
              class="flag flag-uk svelte-2puf0x"
            />
            Option 1
             
          </button>
          <button
            class="row btn dropdownred svelte-2puf0x"
            data-testid="option1"
            type="button"
          >
            <i
              class="flag flag-es svelte-2puf0x"
            />
            Option 2
             
          </button>
        </div>
      </div>
    </div>
  </body>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`check handler click function 1`] = `
Object {
  "component": MyDropDown {
    "$$": Object {
      "after_update": Array [],
      "before_update": Array [],
      "bound": Object {},
      "callbacks": Object {},
      "context": Map {},
      "ctx": Array [
        Array [
          MyDropDownOption {
            "cssClass": "flag flag-uk",
            "handleClick": [Function],
            "text": "Option 1",
          },
          MyDropDownOption {
            "cssClass": "flag flag-es",
            "handleClick": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            },
            "text": "Option 2",
          },
        ],
        "main text caption display",
        true,
        "bi bi-caret-left",
        0,
        -0,
        [Function],
        [Function],
        [Function],
      ],
      "dirty": Array [
        -1,
      ],
      "fragment": Object {
        "c": [Function],
        "d": [Function],
        "i": [Function],
        "l": [Function],
        "m": [Function],
        "o": [Function],
        "p": [Function],
      },
      "not_equal": [Function],
      "on_destroy": Array [
        [Function],
      ],
      "on_disconnect": Array [],
      "on_mount": Array [],
      "props": Object {
        "dropDownOptions": 0,
        "mainCaption": 1,
      },
      "skip_bound": false,
      "update": [Function],
    },
    "$$set": [Function],
    "$capture_state": [Function],
    "$inject_state": [Function],
  },
  "container": <body>
    <div>
      <div
        class="col"
      >
        <button
          class="row dropdownred svelte-2puf0x"
          data-testid="mainbuttondropdown"
          id="mainButton"
          type="button"
        >
          main text caption display
           
          <svg
            class="iconCaret bi bi-caret-left svelte-2puf0x"
            fill="currentColor"
            height="16"
            viewBox="0 0 16 16"
            width="16"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M10 12.796V3.204L4.519 8 10 12.796zm-.659.753-5.48-4.796a1 1 0 0 1 0-1.506l5.48-4.796A1 1 0 0 1 11 3.204v9.592a1 1 0 0 1-1.659.753z"
            />
          </svg>
        </button>
         
        <div
          class="row"
          hidden=""
          style="display: inline-block; position: absolute; inset: 0px auto auto 0px; margin: 0px; transform: translate(0px, 0px);"
        >
          <button
            class="row btn dropdownred svelte-2puf0x"
            data-testid="option0"
            type="button"
          >
            <i
              class="flag flag-uk svelte-2puf0x"
            />
            Option 1
             
          </button>
          <button
            class="row btn dropdownred svelte-2puf0x"
            data-testid="option1"
            type="button"
          >
            <i
              class="flag flag-es svelte-2puf0x"
            />
            Option 2
             
          </button>
        </div>
      </div>
    </div>
  </body>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
